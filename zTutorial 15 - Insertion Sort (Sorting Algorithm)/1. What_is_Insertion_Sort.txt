What is Insertion Sort?
Insertion Sort is a sorting algorithm that sorts a list by iteratively building a sorted subarray within 
the given unsorted array. The algorithm splits the unsorted array into 2 subarrays, the sorted subarray
and unsorted subarray. It starts with the first element as the sorted subarray (since a single element is 
always considered sorted), and then it repeatedly takes the next element from the unsorted part of the array
and inserts it into its correct position in the sorted subarray until the whole array becomes sorted (all 
the elements in the unsorted subarray is brought to the sorted subarray, and there is no more unsorted 
subarray, and the initial List now only contains the sorted subarray and is now sorted)


//////////////////////////////////////////////


Is the Insertion Sort Algorithm implemented iteratively or recursively?

Insertion Sort Algorithm is more commonly implemented iteratively. (implementing it recursively is possible
but its not very useful or practical)

In this tutorial we will be learning how to implement Insertion Sort iteratively.


//////////////////////////////////////////////


Before we delve into how Insertion Sort Algorithm works, lets imagine we want to sort an unsorted Array 
Data Structure/Python's List using another empty List.

Visualisation of how sorting an unsorted List using another empty List works:
One way we could do this is to create a seperate empty array, which will be our sorted List.
   Sorted List:                     Unsorted List:
   []                               [21][38][29][17][4][25][11]

Now, we will take one element at a time from the unsorted List (from the first to last element, in order), 
and insert it in the sorted List in such a way that the sorted List remains sorted.

For the first element ('21'), since there is currently no elements in the sorted List, we can just insert 
the first element into the sorted List without making any comparison with existing elements in the sorted 
List to find the correct position in the sorted List for the inserted element (first element ('21')) such 
that the sorted List remains sorted (since if there is only one element in a List, that List can be 
automatically considered sorted)
   Sorted List:                     Unsorted List:
   [21]                             [21][38][29][17][4][25][11]
                                      ^
                              (inserted element)

For the second element ('38'), we need to compare it with the existing elements in the sorted List to find 
the correct position in the sorted List for the inserted element (second element ('38')) such that the sorted 
List remains sorted. To do that, we will need to insert the second element ('38') after the element ('21') 
in the sorted List (the only element in the sorted List currently) since '38' (inserted element) > '21'
   Sorted List:                     Unsorted List:
   [21][38]                         [21][38][29][17][4][25][11]
                                          ^
                                  (inserted element)

For the third element ('29'), we need to compare it with the existing elements in the sorted List to find 
the correct position in the sorted List for the inserted element (third element ('29')) such that the sorted 
List remains sorted. To do that, we will need to insert the third element ('29') after the element ('21'),
and before the element ('38') in the sorted List since '21' < '29' (inserted element) < '38'
   Sorted List:                     Unsorted List:
   [21][29][38]                     [21][38][29][17][4][25][11]
                                              ^
                                      (inserted element)

For the remaining elements in the unsorted List, here is a visualisation on how this sorting process will 
be like:
For the fourth element ('17'),
   Sorted List:                     Unsorted List:
   [17][21][29][38]                 [21][38][29][17][4][25][11]
                                                  ^
                                          (inserted element)

For the fifth element ('4'),
   Sorted List:                     Unsorted List:
   [4][17][21][29][38]              [21][38][29][17][4][25][11]
                                                     ^
                                             (inserted element)

For the sixth element ('25'),
   Sorted List:                     Unsorted List:
   [4][17][21][25][29][38]          [21][38][29][17][4][25][11]
                                                         ^
                                                 (inserted element)

For the seventh element ('11'),
   Sorted List:                     Unsorted List:
   [4][11][17][21][25][29][38]      [21][38][29][17][4][25][11]
                                                             ^
                                                     (inserted element)



How does Insertion Sort Algorithm work?

Now here's a question, 
   'Could you do the above method without using the extra (sorted) List?'


That is exactly what the Insertion Sort Algorithm is about, doing an almost similar method above, but without
the extra (sorted List). Here's how Insertion Sort works,

Here are the steps of Insertion Sort Algorithm:
1. Split the unsorted array/List into 2 subarrays, the sorted subarray and unsorted subarray. We will do this 
   by creating a pointer pointing to the second element of the unsorted List. 

   (Note: Why didn't we create the pointer pointing at the first element of the unsorted List? There is no nned
   to do this since we would want to start the Insertion Sort Algorithm with at least an element in the sorted
   subarray (elements at the left side of the pointer). We don't have to worry about trying to sort the first 
   element being inserted/transferred to the sorted subarray since it will be empty initially, and when there
   is only one element in a List, that List is automatically considered sorted without having to try to sort it)

   This pointer acts as as a divider, where,
   -> the elements on the left side of the pointer is part of the sorted subarray
   -> the elements on the right side of the pointer is part of the unsorted subarray
   -> the element the pointer is pointing at will be the element we want to insert/transfer over from the 
      unsorted subarray to the sorted subarray. 
      => before it is inserted/transferred over from the unsorted subarray to the sorted subarray, it will be 
         considered part of the unsorted subarray
      => after it is inserted/transferred over from the unsorted subarray to the sorted subarray, it will be 
         considered part of the sorted subarray

2. Compare the element that the pointer is pointing at with the existing elements in the sorted subarray to find 
   the correct position in the sorted subarray for the inserted element such that the sorted subarray remains 
   sorted. 
   (Before the element that the pointer is pointing at is inserted/transferred over from the unsorted subarray 
   to the sorted subarray, it will be considered part of the unsorted subarray)
         
   Insert/Transfer the over the element that the pointer is pointing at from the unsorted subarray to 
   the sorted subarray. 
   (After the element that the pointer is pointing at is inserted/transferred over from the unsorted subarray 
   to the sorted subarray, it will be considered part of the sorted subarray)

   Note: - How exactly (the exact algorithmic steps) we will be finding the correct position for the inserted 
           element in the sorted aubarray such that the sorted subarray remains sorted will be further 
           discussed when we are implementing the Insertion Sort Algorithm in code in 
           '2. insertion_sort_(function).py'
         - You can think of it as at the end of step 2, the size of the sorted subarray will increase by 1, 
           while the size of the unsorted subarray will decrease by 1

3. Move the pointer down the unsorted List, to the next index/element (unless you've reached the end of the
   unsorted List)

4. Repeat steps 2 and 3 iteratively for each element in the unsorted List


To explain the Insertion Sort Algorithm visually, we will be using the same unsorted List from the example above, 

Visualisation of how Insertion Sort Algorithm works:
1. The first step to Insertion Sort is to split the unsorted array/List into 2 subarrays, the sorted subarray 
   and unsorted subarray. How can we do this? We can do this by creating a pointer pointing to the second element
   of the unsorted List like so:
       ss             us                              (Let 'ss' be the sorted subarray, 
      <--> <-------------------->                          'us' be the unsorted subarray)
      [21][38][29][17][4][25][11]
            ^
         (pointer)


(Starting iteration, for the second element's iteration)
2. For the second element ('38'), we need to compare it with the existing elements in the sorted subarray to find 
   the correct position in the sorted subarray for the inserted element (second element ('38')) such that the sorted 
   subarray remains sorted. To do that, we will need to insert the second element ('38') after the element ('21') 
   in the sorted subarray (the only element in the sorted subarray currently) since '38' (inserted element) > '21'.
   Before the second element ('38') is inserted/transferred over from the unsorted subarray to the sorted 
   subarray:
       ss             us              
      <--> <-------------------->       
      [21][38][29][17][4][25][11]
            ^
         (pointer)

   After the second element ('38') is inserted/transferred over from the unsorted subarray to the sorted 
   subarray:
         ss           us                   
      <------><----------------->                  
      [21][38][29][17][4][25][11]
            ^
         (pointer)

3. Now we will move the pointer down the unsorted List, from pointing at the second element ('38') to pointing at 
   the third element ('29')
         ss           us                      
      <------><----------------->                 
      [21][38][29][17][4][25][11]
                ^
            (pointer)

(Step 4, for the third element's iteration)
2. For the third element ('29'), we need to compare it with the existing elements in the sorted subarray to find 
   the correct position in the sorted subarray for the inserted element (third element ('29')) such that the sorted 
   subarray remains sorted. To do that, we will need to insert the third element ('29') after the element ('21'),
   and before the element ('38') in the sorted subarray since '21' < '29' (inserted element) < '38'
   Before the third element ('29') is inserted/transferred over from the unsorted subarray to the sorted 
   subarray:
           ss           us                        
      <------><----------------->                
      [21][38][29][17][4][25][11]
                ^
            (pointer)

   After the third element ('29') is inserted/transferred over from the unsorted subarray to the sorted 
   subarray:
           ss           us                     
      <----------><------------->          
      [21][29][38][17][4][25][11]
                ^
            (pointer)

   (Notice that the third element of the unsorted List is no longer '29', but is now '38' when the initial third
   element ('29') is inserted/transferred over from the unsorted subarray to the sorted subarray such that the 
   sorted subarray remains sorted)

3. Now we will move the pointer down the unsorted List, from pointing at the third element ('38') to pointing at 
   the fourth element ('17')
           ss           us                         
      <----------><------------->                       
      [21][29][38][17][4][25][11]
                    ^
                (pointer)

(Step 4, for the remaining elements' iterations)
For the remaining elements in the unsorted subarray, here is a visualisation on how Insertion Sort will 
be like:
(Step 4, for the fourth element's iteration)
For the fourth element ('17'),
2. Before the fourth element ('17') is inserted/transferred over from the unsorted subarray to the sorted 
   subarray:
          ss           us                         
      <----------><------------->                
      [21][29][38][17][4][25][11]
                    ^
                (pointer)

   After the fourth element ('17') is inserted/transferred over from the unsorted subarray to the sorted 
   subarray:
             ss           us                     
      <--------------><--------->          
      [17][21][29][38][4][25][11]
                    ^
                (pointer)

3. Moving the pointer down the unsorted List, from pointing at the fourth element ('38') to pointing at 
   the fifth element ('4')
             ss           us                     
      <--------------><--------->          
      [17][21][29][38][4][25][11]
                       ^
                    (pointer)

(Step 4, for the fifth element's iteration)
For the fifth element ('4'),
2. Before the fifth element ('4') is inserted/transferred over from the unsorted subarray to the sorted 
   subarray:
             ss           us                     
      <--------------><--------->          
      [17][21][29][38][4][25][11]
                       ^
                    (pointer)

   After the fifth element ('4') is inserted/transferred over from the unsorted subarray to the sorted 
   subarray:
               ss           us                     
      <-----------------><------>          
      [4][17][21][29][38][25][11]
                       ^
                    (pointer)

3. Moving the pointer down the unsorted List, from pointing at the fifth element ('38') to pointing at 
   the sixth element ('25')
               ss           us                     
      <-----------------><------>          
      [4][17][21][29][38][25][11]
                           ^
                       (pointer)

(Step 4, for the sixth element's iteration)
For the sixth element ('25'),
2. Before the sixth element ('25') is inserted/transferred over from the unsorted subarray to the sorted 
   subarray:
               ss           us                     
      <-----------------><------>          
      [4][17][21][29][38][25][11]
                           ^
                       (pointer)

   After the sixth element ('25') is inserted/transferred over from the unsorted subarray to the sorted 
   subarray:
                 ss           us                     
      <---------------------><-->          
      [4][17][21][25][29][38][11]
                           ^
                       (pointer)

3. Moving the pointer down the unsorted List, from pointing at the sixth element ('38') to pointing at 
   the seventh element ('11')
                 ss           us                     
      <---------------------><-->          
      [4][17][21][25][29][38][11]
                               ^
                           (pointer)

(Step 4, for the seventh element's iteration)
For the seventh element ('11'),
2. Before the seventh element ('11') is inserted/transferred over from the unsorted subarray to the sorted 
   subarray:
                 ss           us                     
      <---------------------><-->          
      [4][17][21][25][29][38][11]
                               ^
                           (pointer)

   After the seventh element ('11') is inserted/transferred over from the unsorted subarray to the sorted 
   subarray:
                  ss                                
      <------------------------->         
      [4][11][17][21][25][29][38]
                               ^
                           (pointer)

3. Since we have reached the end of the unsorted (now sorted) List, there is no need to move the pointer 
   down the unsorted (now sorted) List. 
   

Here is the now sorted List via Insertion Sort ALgorithm.

   [4][11][17][21][25][29][38]


//////////////////////////////////////////


Explaining the Big O Notation of Time and Space Complexity of Insertion Sort:

For Big O Notation of Time Complexity of Selection Sort:
For a best sorting testcase (Best Case Time Complexity):
In the best case, it means that the unsorted List is actually already sorted. 

In this case, the number of comaprisons you'll need to make for each element in the unsorted List is:

   For the first element, no comparisons or swaps are needed.
   For the second element, only one comparison is needed, and it's in its correct position, no swaps 
   are needed
   For the third element, only one comparison is needed, and it's in its correct position. no swaps 
   are needed
   ...
   For the nth element, only one comparison is needed, and it's in its correct position, no swaps 
   are needed

The total number of comparisons is:
      0 + 1 + 1 + ... + 1 = n-1 ~ n
The total number of swaps is:
      0 + 0 + 0 + ... + 0 = 0

The total number of operations is:
   n + 0 = n

gives us O(n) overall complexity.

For a worst sorting testcase (Worst Case Time Complexity):
The worst case is in the unsorted List, for each element in the unsorted subarray, you have to compare it 
with all the elements in the sorted subarray before it can be inserted/transferred over from the unsorted
to sorted subarray. And after it is inserted/transferred, you need to make a swap to all the elements in
the sorted subarray, as well as the element to be inserted/transferred to keep the sorted subarray sorted.

In this case, the number of comaprisons you'll need to make for each element in the unsorted List is:

   For the first element, you perform 0 comparisons, no swaps are needed.
   For the second element, you perform 1 comparison, 1 swap is needed.
   For the third element, you perform 2 comparisons, 2 swaps are needed.
   ...
   For the nth element, you perform (n-1) comparisons, (n-1) swaps are needed.

The total number of comparisons is:
      0 + 1 + 2 + ... + (n-1) = n*(n-1)/2 ~ n^2
The total number of swaps is:
      0 + 1 + 2 + ... + (n-1) = n*(n-1)/2 ~ n^2

The total number of operations is:
   n^2 + n^2 = 2n^2 ~ n^2

giving us O(n^2) overall complexity.


For Big O Notation of Space Complexity of Insertion Sort:
It is Big O Notation Space Complexity of O(1) because when you are sorting the elements in the unsorted 
List, you are not using any additional variables/memory (at least any additional variables/memory 
proportional to the input size to perform the sorting process), and just doing the sorting process within 
the same unsorted List. At most you are just using extra variables to facilitate the sorting of the unsorted 
List, but since this amount of space/memory used is fixed regardless of the n size of the List it means 
that the Big O Notation of Space Complexity is still O(1).


//////////////////////////////////////////


Advantages and Disadvantages of Insertion Sort Algorithm compared to other sorting algorithms:

Advantages of Insertion Sort:
1. Simplicity: Insertion Sort has a straightforward and easy-to-understand implementation, making it a good 
   choice for educational purposes or situations where simplicity is preferred.
2. In-place sorting: Insertion Sort is an in-place algorithm, meaning it doesn't require additional memory to 
   perform the sorting. It sorts the elements directly within the input array, making it memory-efficient.
3. Adaptive: Insertion Sort's performance improves when the array is partially sorted or has elements in the 
   correct order. It requires fewer operations to sort such data, making it an adaptive sorting algorithm.
4. Stable: Insertion Sort is a stable sorting algorithm, meaning it preserves the relative order of equal 
   elements in the input array.
5. Online algorithm: Insertion Sort is an online algorithm, meaning it can sort data as it arrives, without 
   needing to wait for all the data to be present.

Disadvantages of Insertion Sort:
1. Time complexity: Insertion Sort has a time complexity of O(n^2) in the worst and average case scenarios. 
   This makes it inefficient for large datasets, as the number of comparisons and swaps grows quadratically 
   with the size of the array.
2. Not suitable for large datasets: Due to its quadratic time complexity, Insertion Sort is not well-suited 
   for sorting large datasets. It becomes impractical when dealing with thousands or millions of elements.
3. Slower than more advanced algorithms: In comparison to more efficient algorithms like Quick Sort, Merge 
   Sort, or Heap Sort, Insertion Sort is significantly slower for most use cases.
4. Lack of scalability: As the size of the input array increases, the execution time of Insertion Sort 
   increases significantly, making it unsuitable for large-scale data sorting tasks.
5. Limited use cases: While Insertion Sort can perform well on small or partially sorted datasets, it is not
   commonly used in real-world applications for large or unsorted datasets.


/////////////////////////////////////////


Why is Insertion Sort called 'Insertion Sort'?

Insertion sort is called as such because it works by inserting elements from an unsorted part of the array into 
their correct positions in the sorted part of the array. The algorithm maintains two subarrays, the sorted 
subarray and the unsorted subarray within the same array.


//////////////////////////////////////////


Big O Notation of Time and Space Complexity for Insertion Sort Algorithm:

    Sorting Algorithms   |  Space Complexity  |   Time Complexity
      Insertion Sort     |        O(1)	  	    |       O(n^2)

